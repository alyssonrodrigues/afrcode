package br.com.afrcode.apps.egos.dominio.dao;

import java.math.BigDecimal;
import java.util.Calendar;
import java.util.Collections;
import java.util.Map;

import org.junit.Assert;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcOperations;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.test.context.transaction.TransactionConfiguration;
import org.springframework.transaction.annotation.Transactional;

import br.com.afrcode.apps.egos.dominio.OrdemServico;
import br.com.afrcode.apps.egos.spring.config.BeansSpringTestesConfig;

@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(classes = BeansSpringTestesConfig.class)
@ActiveProfiles("TESTES")
@Transactional
@TransactionConfiguration(defaultRollback = true)
public class DaoJdbcOrdemServicoTest {
	@Rule
	public ExpectedException expectedException =
			ExpectedException.none();
	
	@Autowired
	private NamedParameterJdbcOperations jdbcTemplate;
	
	@Autowired
	@Qualifier("daoJdbcOrdemServico")
	private DaoOrdemServico daoOrdemServico;
	
	private OrdemServico criarOS() {
		OrdemServico ordemServico = new OrdemServico();
		ordemServico.setConcluida(true);
		ordemServico.setDataEntregaEmContrato(
				Calendar.getInstance().getTime());
		ordemServico.setDescricao("1a OS");
		ordemServico.setValor(BigDecimal.ONE);
		return ordemServico;
	}
	
	private void executarDDLOrdemServico() {
		final String CREATE_ORDEM_SERVICO_SQL =
				"create table ORDEM_SERVICO ("
				+ "id bigint generated by default "
				+ "as identity (start with 1),"
				+ "descricao varchar(100) not null, "
				+ "valor numeric(19,2) not null, "
				+ "dataEntregaEmContrato date not null, "
				+ "concluida boolean not null, "
				+ "primary key (id))";
		Map<String, Object> params = Collections.emptyMap();
		jdbcTemplate.update(CREATE_ORDEM_SERVICO_SQL, params);
	}

	@Test
	public void testarSalvarRecuperarEExcluirOrdemServico() {
		executarDDLOrdemServico();
		OrdemServico ordemServico = criarOS();
		daoOrdemServico.salvar(ordemServico);
		
		OrdemServico ordemServicoEmBD = 
				daoOrdemServico.recuperarOrdemServico(1L);
		Assert.assertNotNull("Uma OS deveria existir em BD!",
				ordemServicoEmBD);
		Assert.assertSame("O id da OS em BD deveria ser 1!",
				1L, ordemServicoEmBD.getId());
		
		daoOrdemServico.excluir(ordemServicoEmBD);
		expectedException.expect(EmptyResultDataAccessException.class);
		daoOrdemServico.recuperarOrdemServico(1L);
		Assert.fail("Após a exclusão não deveria existir OS de id 1!");
	}
}
